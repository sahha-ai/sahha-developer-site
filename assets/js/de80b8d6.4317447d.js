"use strict";(self.webpackChunksahha_developer_site=self.webpackChunksahha_developer_site||[]).push([[7012],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var a=n(7462),r=n(7294),s=n(6010),o=n(2466),i=n(6550),l=n(1980),p=n(7392),u=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,p]=h({queryString:n,groupId:a}),[c,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),g=(()=>{const e=l??c;return m({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),b(e)}),[p,b,s]),tabValues:s}}var g=n(2389);const S={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==i&&(c(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.Z)("tabs__item",S.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function f(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=b(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",S.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(f,(0,a.Z)({},e,t)))}function v(e){const t=(0,g.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},7538:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),s=n(4866),o=n(5162);const i={sidebar_position:3},l="Sensors",p={unversionedId:"use-the-sdk/sensors",id:"use-the-sdk/sensors",title:"Sensors",description:"Manage device sensors",source:"@site/docs/use-the-sdk/sensors.md",sourceDirName:"use-the-sdk",slug:"/use-the-sdk/sensors",permalink:"/docs/use-the-sdk/sensors",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Profile",permalink:"/docs/use-the-sdk/profile"},next:{title:"Analyzation",permalink:"/docs/use-the-sdk/analyzation"}},u={},c=[{value:"Sensor Status",id:"sensor-status",level:2},{value:"(iOS) Sensor Status - <strong>IMPORTANT INFO</strong>",id:"ios-sensor-status---important-info",level:3},{value:"Get Sensor Status",id:"get-sensor-status",level:2},{value:"Enable Sensors",id:"enable-sensors",level:2},{value:"(iOS) Sleep Sensor - <strong>IMPORTANT INFO</strong>",id:"ios-sleep-sensor---important-info",level:3},{value:"Open App Settings",id:"open-app-settings",level:2},{value:"(iOS) Permission Changes - <strong>IMPORTANT INFO</strong>",id:"ios-permission-changes---important-info",level:3},{value:"Post Sensor Data",id:"post-sensor-data",level:2}],d={toc:c},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sensors"},"Sensors"),(0,r.kt)("p",null,"Manage device sensors"),(0,r.kt)("admonition",{title:"Sahha handles sensors for your app",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The Sahha SDK acts as a bridge between your app and the sensors."),(0,r.kt)("p",{parentName:"admonition"},"This simplifies the process of collecting and analyzing device data.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"sensor-status"},"Sensor Status"),(0,r.kt)("p",null,"The sensors have multiple possible statuses."),(0,r.kt)(s.Z,{groupId:"os",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title=MyApp.swift",title:"MyApp.swift"},"public enum SensorStatus: Int {\n    case pending = 0 // Sensors pending (before prompting user for permission)\n    case unavailable = 1 // Sensors not supported by user's device\n    case disabled = 2 // Sensors disabled (after prompting user for permission)\n    case enabled = 3 // Sensors enabled (after prompting user for permission)\n}\n"))),(0,r.kt)(o.Z,{value:"android",label:"Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},"enum class SahhaSensorStatus {\n    pending, // Sensors pending User permission\n    unavailable, // Sensors not supported by the User's device\n    disabled, // Sensors disabled by the User\n    enabled // Sensors enabled by the User\n}\n"))),(0,r.kt)(o.Z,{value:"flutter",label:"Flutter",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=MyApp.dart",title:"MyApp.dart"},"enum SahhaSensorStatus {\n  pending // Sensors pending User permission\n  unavailable // Sensors not supported by the User's device\n  disabled // Sensors disabled by the User\n  enabled // Sensors enabled by the User\n}\n"))),(0,r.kt)(o.Z,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=MyApp.tsx",title:"MyApp.tsx"},"export enum SahhaSensorStatus {\n  pending = 0, // Sensors pending User permission\n  unavailable = 1, // Sensors not supported by the User's device\n  disabled = 2, // Sensors disabled by the User\n  enabled = 3, // Sensors enabled by the User\n}\n")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"ios-sensor-status---important-info"},"(iOS) Sensor Status - ",(0,r.kt)("strong",{parentName:"h3"},"IMPORTANT INFO")),(0,r.kt)("admonition",{title:"User Privacy",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Apple limits the ability to detect the true sensor status to protect user privacy."),(0,r.kt)("h4",{parentName:"admonition",id:"apple-documentation"},"Apple documentation:"),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"To help protect the user\u2019s privacy, your app doesn\u2019t know whether the user granted or denied permission to read data from HealthKit. If the user denied permission, attempts to query data from HealthKit return only samples that your app successfully saved to the HealthKit store.")),(0,r.kt)("p",{parentName:"admonition"},"This means that if a Sensor is available, the only possible SensorStatus is:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pending")," if you have not already prompted the user for permission yet"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enabled")," if you have already prompted the user for permission yet")),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," SensorStatus is not triggered even if the user declines permission."),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," SensorStatus is only included in the iOS SDK to keep parity with the Android SDK."),(0,r.kt)("p",{parentName:"admonition"},"Please read the official Apple documentation to better understand authorizing access to health data for iOS."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/healthkit/authorizing_access_to_health_data"},"Authorizing access to health data for iOS"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"get-sensor-status"},"Get Sensor Status"),(0,r.kt)("p",null,"You can check the current status of the sensors by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"getSensorStatus"),". This method is asynchronous and will return the updated ",(0,r.kt)("inlineCode",{parentName:"p"},"SahhaSensorStatus")," in its callback."),(0,r.kt)("admonition",{title:"Configure the SDK before you Get Sensor Status",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"On app launch, ",(0,r.kt)("inlineCode",{parentName:"p"},"SensorStatus")," will always be ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),". You must configure the SDK before you can get the correct ",(0,r.kt)("inlineCode",{parentName:"p"},"SensorStatus"),"."),(0,r.kt)("p",{parentName:"admonition"},"We suggest calling ",(0,r.kt)("inlineCode",{parentName:"p"},"getSensorStatus")," in the callback of ",(0,r.kt)("inlineCode",{parentName:"p"},"configure"),".")),(0,r.kt)(s.Z,{groupId:"os",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title=MyApp.swift",title:"MyApp.swift"},'Sahha.configure(settings) {\n    // SDK is ready to use\n    print("SDK Ready")\n    \n    Sahha.getSensorStatus { error, sensorStatus in\n        if let error = error {\n            print(error)\n        }\n        else if sensorStatus == .pending {\n            // Show your custom UI asking your user to setup Sleep in the Health App\n        }\n        else if sensorStatus = .enabled {\n            // Sensors are enabled and ready\n        } else {\n            // Sensors are disabled or unavailable\n        }\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"android",label:"Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},"Sahha.configure(application, settings) { error, success ->\n    if (error != null) {\n        println(error)\n    } else {\n        println(success.toString())\n                \n        Sahha.getSensorStatus(this@MainActivity) { error, sensorStatus ->\n            if (error != null) {\n                println(error)\n            } else {\n                println(sensorStatus.name)\n            }\n        }\n    }\n}\n"))),(0,r.kt)(o.Z,{value:"flutter",label:"Flutter",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=MyApp.dart",title:"MyApp.dart"},"SahhaFlutter.configure(environment: SahhaEnvironment.sandbox)\n    .then((success) {\n        debugPrint(success.toString());\n\n        SahhaFlutter.getSensorStatus().then((value) {\n            setState(() {\n            // Set your variable here to match value\n        });\n        if (value == SahhaSensorStatus.pending) {\n          // Show your custom UI asking your user to setup Sleep in the Health App\n        }\n    }).catchError((error, stackTrace) {\n        debugPrint(error.toString());\n    });\n      \n}).catchError((error, stackTrace) => {\n    debugPrint(error.toString());\n});\n"))),(0,r.kt)(o.Z,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=MyApp.tsx",title:"MyApp.tsx"},"Sahha.configure(settings, (error: string, success: boolean) => {\n    if (error) {\n        console.error(`Error: ${error}`);\n    } else if (success) {\n        console.log(`Success: ${success}`);\n\n        // SDK is ready\n        \n        Sahha.getSensorStatus((error: string, value: SahhaSensorStatus) => {\n          if (error) {\n            console.error(`Error: ${error}`);\n          } else if (value) {\n            console.log(`Sensor Status: ${value}`);\n            // Set sensor status to value\n          }\n        });\n    }\n});\n")))),(0,r.kt)("h2",{id:"enable-sensors"},"Enable Sensors"),(0,r.kt)("p",null,"Before the SDK can start collecting data, you will need to enable sensors by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"enableSensors"),". This method is asynchronous and will return the updated ",(0,r.kt)("inlineCode",{parentName:"p"},"SahhaSensorStatus")," in its callback."),(0,r.kt)(s.Z,{groupId:"os",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title=MyApp.swift",title:"MyApp.swift"},"Sahha.enableSensors { error, sensorStatus in\n    if let error = error {\n        print(error)\n    }\n    else if sensorStatus == .pending {\n        // Show your custom UI asking your user to setup Sleep in the Health App\n    }\n    else if sensorStatus = .enabled {\n        // Sensors are enabled and ready\n    } else {\n        // Sensors are disabled or unavailable\n    }\n}\n"))),(0,r.kt)(o.Z,{value:"android",label:"Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},"Sahha.enableSensors(this@MainActivity) { error, sensorStatus ->\n    if (error != null) {\n        println(error)\n    } else {\n        println(sensorStatus.name)\n    }\n}\n"))),(0,r.kt)(o.Z,{value:"flutter",label:"Flutter",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=MyApp.dart",title:"MyApp.dart"},"SahhaFlutter.enableSensors()\n.then((value) {\n    setState(() {\n        sensorStatus = value;\n    });\n    debugPrint(describeEnum(sensorStatus));\n}).catchError((error, stackTrace) => {\n    debugPrint(error);\n});\n"))),(0,r.kt)(o.Z,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=MyApp.tsx",title:"MyApp.tsx"},"Sahha.enableSensors((error: string, value: SahhaSensorStatus) => {\n    if (error) {\n        console.error(`Error: ${error}`);\n    } else if (value) {\n        console.log(`Sensor Status: ${value}`);\n        setSensorStatus(value);\n    }\n});\n")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"ios-sleep-sensor---important-info"},"(iOS) Sleep Sensor - ",(0,r.kt)("strong",{parentName:"h3"},"IMPORTANT INFO")),(0,r.kt)("admonition",{title:"Setup Sleep Before Using the SDK",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"In order for the Sahha SDK to collect data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep")," sensor, Sleep functionality must be enabled by your mobile user ",(0,r.kt)("strong",{parentName:"p"},"BEFORE")," calling ",(0,r.kt)("inlineCode",{parentName:"p"},"enableSensors"),"."),(0,r.kt)("p",{parentName:"admonition"},"We suggest checking if your user has seen the HealthKit permission screen before enabling the ",(0,r.kt)("inlineCode",{parentName:"p"},"sleep")," sensor. If the status is ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),", this is the perfect time to show your custom UI asking your user to setup Sleep in the Health App."),(0,r.kt)("p",{parentName:"admonition"},"Please read the official Apple documentation to help your users setup Sleep for iOS."),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://support.apple.com/en-us/HT211685"},"Sleep for iOS"))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"open-app-settings"},"Open App Settings"),(0,r.kt)("p",null,"It's possible for your app user to disable a sensor. In this case, you must send the user to the app settings to manually enable the sensor."),(0,r.kt)(s.Z,{groupId:"os",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title=MyApp.swift",title:"MyApp.swift"},"Sahha.openAppSettings()\n"))),(0,r.kt)(o.Z,{value:"android",label:"Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},"Sahha.openAppSettings(this@MainActivity)\n"))),(0,r.kt)(o.Z,{value:"flutter",label:"Flutter",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=MyApp.dart",title:"MyApp.dart"},"SahhaFlutter.openAppSettings()\n"))),(0,r.kt)(o.Z,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=MyApp.tsx",title:"MyApp.tsx"},"Sahha.openAppSettings();\n")))),(0,r.kt)("h3",{id:"ios-permission-changes---important-info"},"(iOS) Permission Changes - ",(0,r.kt)("strong",{parentName:"h3"},"IMPORTANT INFO")),(0,r.kt)("admonition",{title:"App will terminate if Permission Changes",type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"If the user enables / disables a sensor permission from the device settings menu while your app is in the background, the iOS system will force your app to terminate. This is intentional behavior and your app will need to be relaunched.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"post-sensor-data"},"Post Sensor Data"),(0,r.kt)("p",null,"You have the option of manually posting sensor data."),(0,r.kt)("admonition",{title:"Sahha will post sensor data automatically",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"By default, the Sahha SDK will post sensor data automatically. ",(0,r.kt)("strong",{parentName:"p"},"Using the method is OPTIONAL.")),(0,r.kt)("p",{parentName:"admonition"},"However, you can also post sensor data manually to the Sahha API by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"postSensorData")," at a regular interval of your choosing. Any new sensor data that has been collected since the last automatic or manual post will be uploaded."),(0,r.kt)("p",{parentName:"admonition"},"We recommend that you DO NOT use this method more than once per hour.")),(0,r.kt)(s.Z,{groupId:"os",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:"title=MyApp.swift",title:"MyApp.swift"},"Sahha.postSensorData { error, success in\n    if let error = error {\n        print(error)\n    }\n    print(success)\n}\n"))),(0,r.kt)(o.Z,{value:"android",label:"Android",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"title=MainActivity.kt",title:"MainActivity.kt"},'Sahha.postSensorData { error, success ->\n    if (success) manualPost = "Successful"\n    else manualPost = error ?: "Failed"\n}\n'))),(0,r.kt)(o.Z,{value:"flutter",label:"Flutter",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"title=MyApp.dart",title:"MyApp.dart"},"SahhaFlutter.postSensorData()\n.then((success) => {\n    debugPrint(success.toString())\n})\n.catchError((error, stackTrace) => {\n    debugPrint(error.toString())\n});\n"))),(0,r.kt)(o.Z,{value:"react-native",label:"React Native",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"title=MyApp.tsx",title:"MyApp.tsx"},"Sahha.postSensorData((error: string, success: boolean) => {\n    console.log(`Success: ${success}`);\n    if (error) {\n        console.error(`Error: ${error}`);\n    }\n});\n")))))}h.isMDXComponent=!0}}]);